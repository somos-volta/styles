//
//  MEDIA QUERY VARIABLES, FUNCTIONS AND MIXIN
//  gist.github.com/cristianferrarig/4755293
//
//  @author  Cristian Ferrari
//  @email   cristianferrarig@gmail.com
//  @github  cristianferrarig
//
//  # Usage
//  @import "prey/utils/mediaquery";
//
//  # SCSS usage:
//  @media screen #{to(phone)} { /* CSS here */ }

//  # Or mixin usage:
//  @include respond(to phone)   { /* CSS here ... */ };
//  @include respond(from phone) { /* CSS here ... */ };
//
//  @include respond(to 320px)   { /* CSS here ... */ };
//  @include respond(from 320px) { /* CSS here ... */ };
//
//  @include respond(from 320px, 2x)                  { /* CSS here ... */ };
//  @include respond(from 320px, portrait)            { /* CSS here ... */ };
//  @include respond(from 320px, to 500px, landscape) { /* CSS here ... */ };
//
//  @include respond(from 320px, to 500px)   { /* CSS here ... */ };
//  @include respond(from 320px, to(medium)) { /* CSS here ... */ };
//

// Supported breakpoints
// $breakpoints: (
//   phone:          $size-mini,
//   tablet:         $size-small,
//   laptop:         $size-medium,
//   desktop:        $size-large,
//   cinema:         $size-oversized,
//   container:      $size-container,
// );

@function breakpoint($name) {
  //@return map-get($breakpoints, $name);
  @if map-has-key($breakpoints, $name) {
   @return map-get($breakpoints, $name);
  }
  @else if map-has-key($devices, $name) {
   @return map-get($breakpoints, map-get($devices, $name));
  }
  @else {
    @error "$name is not a valid breakpoint or device, was #{$name}.";
  }
}

@function from($size) {
  $media: $size + 1; /* but */ @if type-of($size) == string { $media: breakpoint($size) + 1; }
  @return unquote('and (min-width: #{$media})');
}

@function to($size) {
  $media: $size; /* but */ @if type-of($size) == string { $media: breakpoint($size); }
  @return unquote('and (max-width: #{$media})');
}

@function only($size-from,$size-to) {
  @return unquote('and (min-width: #{$size-from + 1}) and (max-width: #{$size-to})');
}

@function orientation($type) {
  @return unquote('and (orientation: #{$type})');
}

@function resolution($size) {
  @return unquote('and (-webkit-min-device-pixel-ratio: #{$size}), (min-resolution: #{96 * $size}dpi)');
}

@mixin response($-your-rules...) {
  $-mediatype:  screen;
  $-mediaquery: null;
  $-operator:   null;

  @if nth($-your-rules, 1) == print {
    $-mediatype: print;
  }
  @else {
    @each $-rule in $-your-rules {

      @if type-of($-rule) == list {
        $condition: nth($-rule, 1);
        $size:      nth($-rule, 2);

        @if      $condition == 'from' { $-operator: from($size); }
        @else if $condition == 'to'   { $-operator: to($size); }
      }
      @else if $-rule == portrait  { $-operator: orientation(portrait);  }
      @else if $-rule == landscape { $-operator: orientation(landscape); }
      @else if $-rule == retina    { $-operator: resolution(2); }

      $-mediaquery: append($-mediaquery, $-operator, space);
    }

    @media #{$-mediatype} #{$-mediaquery} {
      @content;
    }
  }
}

@mixin respond($-your-rules...) {
  @include response($-your-rules) {
    @content;
  }
}
